function[sigThresh, sig_p] = mcSigThreshold( mcVals, p, converge )
%% Tests a Monte Carlo process for convergence at a particular significance level.
%
% [sigThreshold, sig_p] = MCconvergence( mcVals, p )
% Sorts a set of values generated by a Monte Carlo process and finds the
% significance threshold at significance level p.
%
% [mcSigThresh, mc_p] = mcSigThreshold(..., 'convergeTest')
% Tests the convergence of the Monte Carlo process by finding the
% significance threshold after each successive iteration.
%
%
% ----- Inputs -----
%
% MCvals: A 2D matrix containing values generated from a Monte Carlo process. The Monte
%      Carlo dimension must be the first dimension.
%
% p: The desired significance level for the test. p must be on the open
%    interval (0, 1).
%
%
% ----- Outputs -----
%
% sigThreshold: The significance threshold at p. 
%
%       If mcVals is an array with size  mc x n, and there are P elements in p,
%       then sigThreshold will an array of size  1 x n x P.  
%
% sig_p: The true significance level being tested for each specified
%         significance level. 

%        (Depending on the number of Monte Carlo iterations, the 
%         significance level of the test may be slightly higher than the 
%         user-specified value. To ensure that p = sig_p, choose values of p
%         and MC such that p*MC is an integer. Equivalently, MC must be a 
%         multiple of 1/p.)
%
% mcSigThresh: The significance threshold following each successive Monte
%       Carlo iteration. 
%
%       If mcVals is an array with size  mc x n, and there are P elements in p,
%       then sigThreshold will an array of size  mc x n x P.  
%
% mc_p: The true significance level being tested at each successive Monte Carlo iteration.
%
%
% ----- Author -----
%
% Jonathan King, 2018, University of Arizona, jonking93@email.arizona.edu

% Parse input
if exist('converge','var')
    if strcmpi(converge,'convergeTest')
        convergeTest = true;
    else
        error('Unrecognized input');
    end
else
    convergeTest = false;
end
% Error Check
if any( p<=0) || any(p>=1)
    error('p must be a number on the open interval (0,1)');
elseif ~ismatrix(mcVals)
    error('mcVals must be a 2D matrix');
elseif any(isnan(mcVals(:)))
    warning('mcVals contains NaN values. This may affect sorting...');
end


% Get sizes of the output array
nP = length(p);
nMC = size(mcVals,1);

% For a convergence test
if convergeTest  
    
    % Preallocate
    sigThresh = NaN( [size(mcVals), nP] );
    sig_p = NaN( nMC, nP );
    
    % For each iteration
    for j = 1:nMC
        % Get the significance threshold for the currently available subset of data
        [sigThresh(j,:,:), sig_p(j,:)] = mcSigThreshold( mcVals(1:j,:), p);
    end
    
% Calculate the threshold
else
    
    % Sort the monte carlo values
    mcVals = sort( mcVals, 1);
    
    % Get the index of the threshold row. If not an integer, use the
    % conservative overestimate.
    index = ceil( (1-p) * nMC );
    
    % Calculate the true significance level of each index row
    sig_p = (1 - (index ./ nMC) );
    
    % Get the values on the index rows
    sigThresh = mcVals( index, : );
    
    % Permute so that p is the final dimension
    pdim = ndims(sigThresh)+1;
    newOrder = 1:pdim;
    newOrder(1) = pdim;
    newOrder(end) = 1;
    
    sigThresh = permute( sigThresh, newOrder);
    
end
    
end
